{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/zscal.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reinterpret from '@stdlib/strided-base-reinterpret-complex128';\nimport { assign as cmul } from '@stdlib/complex-float64-base-mul';\nimport real from '@stdlib/complex-float64-real';\nimport imag from '@stdlib/complex-float64-imag';\n\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point vector by a double-precision complex floating-point constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128} alpha - constant\n* @param {Complex128Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @returns {Complex128Array} input array\n*\n* @example\n* import Complex128Array from '@stdlib/array-complex128';\n* import Complex128 from '@stdlib/complex-float64-ctor';\n*\n* var x = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var alpha = new Complex128( 2.0, 2.0 );\n*\n* zscal( 3, alpha, x, 1, 0 );\n* // x => <Complex128Array>[ -2.0, 6.0, -2.0, 14.0, -2.0, 22.0 ]\n*/\nfunction zscal( N, alpha, x, strideX, offsetX ) {\n\tvar view;\n\tvar re1;\n\tvar im1;\n\tvar re2;\n\tvar im2;\n\tvar sx;\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\t// Reinterpret the input array as a real-valued array of interleaved real and imaginary components:\n\tview = reinterpret( x, 0 );\n\n\t// Adjust the stride and offset:\n\tsx = strideX * 2;\n\tix = offsetX * 2;\n\n\t// Decompose the input scalar to real and imaginary components:\n\tre1 = real( alpha );\n\tim1 = imag( alpha );\n\n\tfor ( i = 0; i < N; i++ ) {\n\t\tre2 = view[ ix ];\n\t\tim2 = view[ ix+1 ];\n\t\tcmul( re1, im1, re2, im2, view, 1, ix );\n\t\tix += sx;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default zscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point vector by a double-precision complex floating-point constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128} alpha - constant\n* @param {Complex128Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @returns {Complex128Array} input array\n*\n* @example\n* import Complex128Array from '@stdlib/array-complex128';\n* import Complex128 from '@stdlib/complex-float64-ctor';\n*\n* var x = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var alpha = new Complex128( 2.0, 2.0 );\n*\n* zscal( 3, alpha, x, 1 );\n* // x => <Complex128Array>[ -2.0, 6.0, -2.0, 14.0, -2.0, 22.0 ]\n*/\nfunction zscal( N, alpha, x, strideX ) {\n\tvar ox = stride2offset( N, strideX );\n\treturn ndarray( N, alpha, x, strideX, ox );\n}\n\n\n// EXPORTS //\n\nexport default zscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport zscal from './zscal.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( zscal, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default zscal;\n"],"names":["zscal","N","alpha","x","strideX","offsetX","view","re1","im1","re2","im2","sx","ix","i","reinterpret","real","imag","cmul","ndarray","stride2offset","setReadOnly"],"mappings":";;snBAkDA,SAASA,EAAOC,EAAGC,EAAOC,EAAGC,EAASC,GACrC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKZ,GAAK,EACT,OAAOE,EAaR,IAVAG,EAAOQ,EAAaX,EAAG,GAGvBQ,EAAe,EAAVP,EACLQ,EAAe,EAAVP,EAGLE,EAAMQ,EAAMb,GACZM,EAAMQ,EAAMd,GAENW,EAAI,EAAGA,EAAIZ,EAAGY,IACnBJ,EAAMH,EAAMM,GACZF,EAAMJ,EAAMM,EAAG,GACfK,EAAMV,EAAKC,EAAKC,EAAKC,EAAKJ,EAAM,EAAGM,GACnCA,GAAMD,EAEP,OAAOR,CACR,CClCA,SAASH,EAAOC,EAAGC,EAAOC,EAAGC,GAE5B,OAAOc,EAASjB,EAAGC,EAAOC,EAAGC,EADpBe,EAAelB,EAAGG,GAE5B,CCrBAgB,EAAApB,EAAA,UAAAkB"}