{"version":3,"file":"index.mjs","sources":["../lib/zscal.js","../lib/ndarray.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cmul from '@stdlib/math-base-ops-cmul';\n\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point vector by a double-precision complex floating-point constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128} za - constant\n* @param {Complex128Array} zx - input array\n* @param {integer} strideX - `zx` stride length\n* @returns {Complex128Array} input array\n*\n* @example\n* import Complex128Array from '@stdlib/array-complex128';\n* import Complex128 from '@stdlib/complex-float64-ctor';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var za = new Complex128( 2.0, 2.0 );\n*\n* zscal( 3, za, zx, 1 );\n*\n* var z = zx.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns -2.0\n*\n* var im = imag( z );\n* // returns 6.0\n*/\nfunction zscal( N, za, zx, strideX ) {\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 || strideX <= 0 ) {\n\t\treturn zx;\n\t}\n\tif ( strideX === 1 ) {\n\t\t// Code for stride equal to `1`...\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tzx.set( cmul( za, zx.get( i ) ), i );\n\t\t}\n\t\treturn zx;\n\t}\n\t// Code for stride not equal to `1`...\n\tix = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tzx.set( cmul( za, zx.get( ix ) ), ix );\n\t\tix += strideX;\n\t}\n\treturn zx;\n}\n\n\n// EXPORTS //\n\nexport default zscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cmul from '@stdlib/math-base-ops-cmul';\n\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point vector by a double-precision complex floating-point constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128} za - constant\n* @param {Complex128Array} zx - input array\n* @param {integer} strideX - `zx` stride length\n* @param {NonNegativeInteger} offsetX - starting `zx` index\n* @returns {Complex128Array} input array\n*\n* @example\n* import Complex128Array from '@stdlib/array-complex128';\n* import Complex128 from '@stdlib/complex-float64-ctor';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var za = new Complex128( 2.0, 2.0 );\n*\n* zscal( 3, za, zx, 1, 0 );\n*\n* var z = zx.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns -2.0\n*\n* var im = imag( z );\n* // returns 6.0\n*/\nfunction zscal( N, za, zx, strideX, offsetX ) {\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 || strideX <= 0 ) {\n\t\treturn zx;\n\t}\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tzx.set( cmul( za, zx.get( ix ) ), ix );\n\t\tix += strideX;\n\t}\n\treturn zx;\n}\n\n\n// EXPORTS //\n\nexport default zscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport zscal from './zscal.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( zscal, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default zscal;\n"],"names":["zscal","N","za","zx","strideX","ix","i","set","cmul","get","offsetX","setReadOnly","ndarray"],"mappings":";;qNAwDA,SAASA,EAAOC,EAAGC,EAAIC,EAAIC,GAC1B,IAAIC,EACAC,EAEJ,GAAKL,GAAK,GAAKG,GAAW,EACzB,OAAOD,EAER,GAAiB,IAAZC,EAAgB,CAEpB,IAAME,EAAI,EAAGA,EAAIL,EAAGK,IACnBH,EAAGI,IAAKC,EAAMN,EAAIC,EAAGM,IAAKH,IAAOA,GAElC,OAAOH,CACP,CAGD,IADAE,EAAK,EACCC,EAAI,EAAGA,EAAIL,EAAGK,IACnBH,EAAGI,IAAKC,EAAMN,EAAIC,EAAGM,IAAKJ,IAAQA,GAClCA,GAAMD,EAEP,OAAOD,CACR,CCpBA,SAASH,EAAOC,EAAGC,EAAIC,EAAIC,EAASM,GACnC,IAAIL,EACAC,EAEJ,GAAKL,GAAK,GAAKG,GAAW,EACzB,OAAOD,EAGR,IADAE,EAAKK,EACCJ,EAAI,EAAGA,EAAIL,EAAGK,IACnBH,EAAGI,IAAKC,EAAMN,EAAIC,EAAGM,IAAKJ,IAAQA,GAClCA,GAAMD,EAEP,OAAOD,CACR,CCzCAQ,EAAAX,EAAA,UAAAY"}